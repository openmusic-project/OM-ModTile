; OM File Header - Saved 2016/05/18 15:46:19
; (6.1001 :patc (om-make-point 10 10) (om-make-point 320 92) (om-make-point 483 450) "" 183 0 nil "2016/05/18 15:46:19")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-ModTile")))(setf *om-current-persistent* (om-load-patch1 "automaton-tiling" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 379 171) (quote "This objet allows to visualize cellular automaton-like behavior from tiling mod 2 with inner rhythm of type (0 1 n). If n is even you can look at the outter rythm cut every n or n+1 letters, and if n is odd, every n or n-1 letters. $The outter rhythm is displayed as a word on the alphabet {0,1}. Small dots represents a 0, big dots a 1, and purple dots are 1s that are connected in a triangular shape.") "" (om-make-point 12 248) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 208 48) (quote "<- evaluate (v) then double click to open the editor") "" (om-make-point 209 182) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 152 61) (quote "<- integer, where to cut the outter rhythm") "" (om-make-point 241 64) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 132 77) (quote "<- inner rhythm as a list of onsets (starting at 0)") "" (om-make-point 75 62) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 209 69) (om-make-point 24 30) 46 "46" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 12 67) (om-make-point 56 30) (list 0 1 46) "(0 1 46)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "AUTOMATON-TILING" (quote automaton-tiling) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "aset" (list 0 1 4)) (om-load-inputfun (quote input-funbox) "" "n" 4))) (om-make-point 120 166) (om-make-point 80 60) (if (find-class (quote automaton-tiling) nil) (make-instance (quote automaton-tiling) :aset (list 0 1 46) :n 46 :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 6 1 nil 0) (4 0 6 2 nil 0))) nil 6.1001))